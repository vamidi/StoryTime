// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
	@@map(name: "users")
	id              String @id @default(cuid())

	tokens          Token[]

	metadata        UserMetaData?
	projects        Project[] @relation(name: "members") // A user can have multiple projects.
	ownedProjects   Project[] @relation(name: "owners")
}

model UserMetaData {
	id          Int @id @default(autoincrement())       // id
	user        User @relation(fields: [userId], references: [id])
	userId      String
	created_at  DateTime @default(now())
	updated_at  DateTime @updatedAt
	displayName String
	email       String @unique
	password    String
	firstName   String
	lastName    String
	photoURL    String?
}

model Token {
	id            Int       @id @default(autoincrement())
	created_at    DateTime  @default(now())
	updated_at    DateTime  @updatedAt
	type          String    // TODO use TokenType when using mysql or postgresql
	hash          String?    @unique // Only used for short lived email tokens
	valid         Boolean   @default(true)
	expiration    DateTime

	// Relation fields
	user          User @relation(fields: [userId], references: [id])
	userId        String
}

// TODO uncomment when using mysql or postgresql enum TokenType {
	// EMAIL // used as a short-lived token sent to the user's email
	// API
// }

model Project {
	@@map(name: "projects")
	id          String @id @default(cuid())  // Unique ID of the project
	metadata    ProjectMetaData? // Meta data of the project
   	tables      Table[]

	memberId    String?
	members     User[] @relation(name: "members", fields: [memberId], references: [id]) // A project can belong to many members.

	owner       User @relation(name: "owners", fields: [ownerId], references: [id])
    ownerId     String // Project belongs to a user
}

model ProjectMetaData {
	id          Int @id @default(autoincrement())       // id
    project     Project @relation(fields: [projectId], references: [id])
    projectId   String // Relation to the project.
	created_at  DateTime @default(now())
	updated_at  DateTime @updatedAt
	title       String
	alias       String
	description String
	private     Boolean
	deleted     Boolean
	languages   String

	// Pipeline settings
	version     String
}

model Table {
	@@map(name: "tables")
    id          String @id @default(cuid())
    project     Project @relation(fields: [projectId], references: [id])
    projectId   String // Relation to the project.
    data        TableData[]
    relations   Relation[]
    revisions   Revision[]
    metadata    TableMetaData?
}

model TableData {
	// @@map(name: "tables")
	id          Int @id @default(autoincrement())       // id
	Table       Table @relation(fields: [tableId], references: [id])
	tableId     String
	deleted     Boolean                                 //
	data        String                                  // key value data
}

model TableMetaData {
	id          Int @id @default(autoincrement())       // id
	Table       Table @relation(fields: [tableId], references: [id])
	tableId     String
	title       String
	description String
	lastUID     Int
	created_at  DateTime @default(now())
	updated_at  DateTime @updatedAt
	owner       String
	private     Boolean
	deleted     Boolean

	// Pipeline settings
	version     String
}

// Revisions is versioning for each row in the table.
model Revision {
	@@map(name: "revisions")
	id              String @id @default(cuid())
	Table           Table @relation(fields: [tableId], references: [id])
	tableId         String // - tableId - where this revision belongs to.
    currentRevID    Int					            // - CurrentRevID - Current revision of the element
    revision        Int 						    // - Revisions - Rev number of the element
    created_at      DateTime @default(now())		// - created_at - Data changed with the new value
    updated_at      DateTime @updatedAt				// - updated_at - Data changed with the new value
    rowID           Int      						// - Id - Id of the element in that table
    oldValue        String							// - oldValue - old value it got now
    newValue        String	 						// - newValue - new value it had.
    uid             String		 				    // - uid - user id that changed it.
    deleted         Boolean
}

model Relation {
	@@map(name: "relations")
	id      String @id @default(cuid())
	Table   Table @relation(fields: [tableId], references: [id])
	tableId String // - tableId - where this revision belongs to.
	columns String                          // Relational data
}
